leia o cursorrules e outros arquivos obrigatórios listados. Ao terminar, não me dê um resumo deles. Apenas confirme que está ciente, que compreendeu e está preparado para acatar as diretrizes

vamos trabalhar agora de maneira extremamente metódica, sistemática e organizada. 
Lento é rápido. Isso significa que ir com calma e realizar ações assertivas, 1 por vez, nos leva ao resultado mais rápido que centenas de erros. 
Quero tudo analisado e pensado, e decisões acertadas com 100% de certeza da implementação atingido antes do resultado final. 
## Orientações Obrigatórias
- As orientações são para serem seguidas de forma direta e especifica.
- Quando eu fizer perguntas, pedir para traçar um plano ou questionar como algo deve ser feito, responda as perguntas. Me de as informações para que eu tome as decisões. Se eu perguntei "como fazer isso?" não comece a fazer imediatamente por conta própria
- Mantenha a atenção para a diferença entre uma pergunta, um comando, uma solicitação, uma orientação, e aja de acordo que o que foi solicitado.
- Não quero a criação de processos, passos e modificações de arquitetura sem aprovação
- A semantica e a ordem das orientações é relevante e deverão ser consideradas na compreensão das orientações
- Informações não solicitadas não deverão ser inventadas ou criadas
- Alterações críticas e mudanças de formato não deverão ser realizadas sem aprovação
- O objetivo é criar um portal online, funcional, confiável, estável, com conexões funcionais
- O uso de informações de fallback em hardcode deve ser evitado ao máximo para não atrapalhar o desenvolvimento das apis
- Layouts deverão seguir o padrão e orientações no layoutguidelines
- Caso um estilo não esteja descrito nesse arquivo deverá ser questionado sem alterações improvisadas
- A identidade visual da marca é importante e as cores, logos e fontes deverão ser respeitados
- Sempre que eu solicitar um plano, uma análise ou um diagnóstico, entregue o resultado pedido e espere por confirmação antes de tomar a iniciativa de realizar alterações. tudo precisa de autorização. 
- Não solicitar logs do git. esses logs não apresentam informações relevantes para o desenvolvimento e, adicionalmente, sempre acabam provocando um loop no qual você retorna com o log para tudo que tenta fazer no console posteriormente. 
- Insira alguma forma de identificação clara nos aqrquivos que compoe indicando a versao atual de cada um e criando um rastro de versao para cada arquivo. lembre-se de incrementar a versao de cada arquivo cada vez que uma alteração for considerada de sucesso. Siga o molde vX.Y.Z, onde X é a versao maior, Y é a versao menor e Z é a versao de correção.
- Sempre que houver um deploy real para GCP ou push real para GitHub, atualize o DEPLOY_LOG.md com as informações precisas: data/hora, tipo, versão, arquivos modificados e descrição. Use os templates específicos para GCP e GitHub. Não registre configurações ou setups como deploys.
- não realizar deploy do projeto, ou push no GitHub sem solicitar confirmação dessa ação. 
- o nome Index.html deve ser evitado para que parem de ocorrer erros de integrações e redirecionamentos das paginas criadas. os nomes deverão refletir os trechos trabalhados.
- Sempre certifique-se de estar fazendo o deploy ou o push para o destino correto.Pushes do git jamais deverão ser trocados de reporitório acidentalmente e deploys no vercel ou no GCP deverão ocorrer com precisão.
- Se a solicitação feita para uma tarefa ser excutada depende de mais informações, de confirmações de dados ou mais recursos, solicite essas informações antes de iniciar a tarefa.Mantenha o compliance com a diretiva nro 4 e não crie aleatóriamente dados adicionais para completar as tarefas.
- Ao final da leitura das diretrizes, leia o arquivo layout guidelines para compreender a aparência esperada. Se houver, leia DEPLOY_LOG.md e o CLEANUP_REPO.md se houver, e o layout guidelines se houver

# Diretrizes de Trabalho
<!-- VERSION: v1.1.0 | DATE: 2025-09-17 | AUTHOR:Lucas Gravina - VeloHub Development Team
Script para criação do projeto atual: Leia na íntegra antes da apresentação do plano de trabalho.
Este projeto será a criação de uma aba de um portal no qual deverá haver uma análise de dados visando o Indice Geral de Produtividade. 
a fonte de informaçoes deverá ser, incialmente uma tela de carregamento com a área de carregamento de 2 planilhas xls para processamento dos dados
Essas planilhas vão informar, em uma, dados de produtividade por ligação, e na outra, dados de avaliação de pausas e interrupções. 
a planilha de interrupções vai conter o nome do operador, o código do evento ocorrido, a data, a duração da interupção, e o motivo da interrupção.
a planilha de produtividade vai conter o nome do operador, o status da ligação (coluna 'Chamada'), a data, a duração da ligação (coluna 'tempo falado'), e 2 notas de avaliação (colunas 'Pergunta2 1' e 'Prgunta2 2')
a aplicaão deve ser limpa, funcionaal, rápida, escalável e de fácil manutenção.
Deve ser criada em react visando operação online, sem dependencia de dados em fallbac, sem a geração de dados simulados aleatorios e sem a dependencia de servidor em rede local 
ofereça soluções para o processamento e carregamento dos dados dados de forma persistente, sem utilização exacerbada de cache que torne o funcionamento pesado demais. 
para uma segunda versão: Possuímos acesso ao MongoDb. Avalie a possivilidade de carregamento tipo Upsert em uma collection específica que forneça um tráfego confiável. 
consulte o operador gerindo a criação do projeto a respeito da equação de produtividade desejada para avaliação e dos dados disponibilizados para visualização
devemos obter dados gerais de produtividade como tempo medio de ligação, tempo mediano de atendimento, tempo médio de pausas e alertas para aumentos dos tempos que se destaquem da média
deveremos ter um container que permita a seleção por operador e que forneça dados de análise individualizados para o agente selecionado 

